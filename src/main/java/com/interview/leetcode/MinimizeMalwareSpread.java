package com.interview.leetcode;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.HashSet;
import java.util.Set;

public class MinimizeMalwareSpread {

    /* Union Find Data Structure
       Time complexity: O(n^2), Space complexity: O(n) */
    public static int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        UnionFind uf = new UnionFind(n);
        for(int i = 0; i < n; i++) {
            for(int j = i + 1; j < n; j++) {
                if(graph[i][j] == 1) {
                    uf.union(i, j);
                }
            }
        }

        Map<Integer, Integer> map = new HashMap<>();
        for (int i : initial) {
            int r = uf.find(i);
            map.put(r, map.getOrDefault(i, 0) + 1);
        }

        Arrays.sort(initial);
        int result = -1, max = -1;

        for (int i : initial) {
            int r = uf.find(i);
            int saved = map.get(r) == 1 ? uf.getSize(r) : 0;
            if (saved > max) {
                result = i;
                max = saved;
            }
        }
        return result;
    }

    public static int minMalwareSpread2(int[][] graph, int[] initial) {
        Arrays.sort(initial);
        int[] color = new int[graph.length];
        Arrays.fill(color, -1);
        for(int i : initial) {
            if(color[i] == -1) {
                boolean[] visited = new boolean[graph.length];
                dfs(graph, i, i, color, visited);
            }
        }
        Map<Integer, Integer> map = new HashMap<>();
        int max = Integer.MIN_VALUE;
        int maxNode = Integer.MAX_VALUE;

        for(int i=0; i < color.length; i++) {
            if(color[i] != -1) {
                int count = map.getOrDefault(color[i], 0) + 1;
                map.put(color[i], count);
                if(count >= max) {
                    if(count > max || (count == max && color[i] < maxNode)) {
                        max = count;
                        maxNode = color[i];
                    }

                }
            }
        }
        return maxNode;
    }

    private static void dfs(int[][] graph, int i, int c, int[] color, boolean[] visited) {
        if(visited[i] || color[i] != -1) return;
        visited[i] = true;
        color[i] = c;
        for(int j = 0; j < graph[0].length; j++) {
            if(graph[i][j] == 1 && i != j) {
                dfs(graph, j, c, color, visited);
            }
        }
    }

    public static void main(String[] args) {
        int[][] graph = {{1,1,0},{1,1,0},{0,0,1}};
        int[] initial = {0, 1};

        System.out.println(minMalwareSpread(graph, initial));

        int[][] graph2 = {{1,0,0},{0,1,0},{0,0,1}};
        int[] initial2 = {0, 2};

        System.out.println(minMalwareSpread(graph2, initial2));

        int[][] graph3 = {{1,1,1},{1,1,1},{1,1,1}};
        int[] initial3 = {1, 2};

        System.out.println(minMalwareSpread(graph3, initial3));

        int[][] graph4 = {{1,0,0,0},{0,1,0,0},{0,0,1,1},{0,0,1,1}};
        int[] initial4 = {1, 2};

        System.out.println(minMalwareSpread(graph4, initial4));

        int[][] graph5 = {
                {1,1,1,0,0,0,0},
                {1,1,1,0,0,0,0},
                {1,1,1,0,0,0,0},
                {0,0,0,1,1,1,1},
                {0,0,0,1,1,1,1},
                {0,0,0,1,1,1,1},
                {0,0,0,1,1,1,1}
        };
        int[] initial5 = {1, 3, 6};
        System.out.println(minMalwareSpread(graph5, initial5));
        System.out.println(minMalwareSpread2(graph5, initial5));
    }
}

class UnionFind {
    int[] parent;
    int[] size;

    public UnionFind(int n) {
        parent = new int[n];
        size = new int[n];

        for(int i = 0; i < n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }

    public int find(int i) {
        if(parent[i] != i) {
            parent[i] = find(parent[i]);
        }
        return parent[i];
    }

    public void union(int i, int j) {
        int iRoot = find(i);
        int jRoot = find(j);

        if(iRoot == jRoot) {
            return;
        }

        parent[iRoot] = jRoot;
        size[jRoot] += size[iRoot];
    }

    public int getSize(int i) {
        return size[i];
    }
}
