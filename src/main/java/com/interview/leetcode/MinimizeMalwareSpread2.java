package com.interview.leetcode;

import java.util.*;

public class MinimizeMalwareSpread2 {

    /* Breadth first search
       Time complexity: O(k
    */
    public int minMalwareSpread(int[][] graph, int[] initial) {
        //Map with key as normal node and value as list of initial infected nodes which infect the normal node directly
        Map<Integer, List<Integer>> map = new HashMap<>();

        for(int i : initial) {
            /* Add initial infected nodes to visited list so that BFS does not move further as we only need to find
               nodes which are directly infected by initial nodes */
            Set<Integer> visited = new HashSet<>();
            for(int j : initial) {
                visited.add(j);
            }

            Queue<Integer> queue = new LinkedList<>();
            queue.add(i);
            while(!queue.isEmpty()) {
                int u = queue.remove();
                for(int v = 0; v < graph[u].length; v++) {
                    if(graph[u][v] == 1) {
                        if(!visited.contains(v)) {
                            visited.add(v);
                            map.putIfAbsent(v, new ArrayList<>());
                            map.get(v).add(i);
                            queue.add(v);
                        }
                    }
                }
            }
        }

        int[] count = new int[graph.length];
        for(int node : map.keySet()) {
            //Node infected by only a single initially infected node
            if(map.get(node).size() == 1) {
                int i = map.get(node).get(0);
                count[i]++;
            }
        }

        int remove = -1;
        int max = 0;

        //Find the max number of nodes directly infected by the initially infected node
        for(int i = 0; i < count.length; i++) {
            if(count[i] > max) {
                max = count[i];
                remove = i;
            }
        }

        /* Corner case: If none of the initial infected nodes are connected to the other nodes, return min index from among the
        initial infected nodes */
        Arrays.sort(initial);
        return remove == -1 ? initial[0] : remove;
    }

    public static void main(String[] args) {

    }
}
